-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Graphql.Object.Project exposing (..)

import Graphql.InputObject
import Graphql.Interface
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Object
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.Scalar
import Graphql.ScalarCodecs
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.Union
import Json.Decode as Decode


id : SelectionSet Graphql.ScalarCodecs.Id Graphql.Object.Project
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Graphql.ScalarCodecs.codecs |> Graphql.Scalar.unwrapCodecs |> .codecId |> .decoder)


name : SelectionSet String Graphql.Object.Project
name =
    Object.selectionForField "String" "name" [] Decode.string


key : SelectionSet String Graphql.Object.Project
key =
    Object.selectionForField "String" "key" [] Decode.string


type alias LinksOptionalArguments =
    { first : OptionalArgument Int
    , last : OptionalArgument Int
    , after : OptionalArgument String
    }


links :
    (LinksOptionalArguments -> LinksOptionalArguments)
    -> SelectionSet decodesTo Graphql.Object.LinkConnection
    -> SelectionSet decodesTo Graphql.Object.Project
links fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { first = Absent, last = Absent, after = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "after" filledInOptionals.after Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "links" optionalArgs object_ identity
