-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Graphql.Query exposing (..)

import Graphql.InputObject
import Graphql.Interface
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Object
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.Scalar
import Graphql.ScalarCodecs
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.Union
import Json.Decode as Decode exposing (Decoder)


me :
    SelectionSet decodesTo Graphql.Object.User
    -> SelectionSet decodesTo RootQuery
me object_ =
    Object.selectionForCompositeField "me" [] object_ identity


type alias ProjectRequiredArguments =
    { id : Graphql.ScalarCodecs.Id }


project :
    ProjectRequiredArguments
    -> SelectionSet decodesTo Graphql.Object.Project
    -> SelectionSet decodesTo RootQuery
project requiredArgs object_ =
    Object.selectionForCompositeField "project" [ Argument.required "id" requiredArgs.id (Graphql.ScalarCodecs.codecs |> Graphql.Scalar.unwrapEncoder .codecId) ] object_ identity


type alias ProjectsOptionalArguments =
    { first : OptionalArgument Int
    , last : OptionalArgument Int
    , after : OptionalArgument String
    }


projects :
    (ProjectsOptionalArguments -> ProjectsOptionalArguments)
    -> SelectionSet decodesTo Graphql.Object.ProjectConnection
    -> SelectionSet decodesTo RootQuery
projects fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { first = Absent, last = Absent, after = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "after" filledInOptionals.after Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "projects" optionalArgs object_ identity


type alias LinksOptionalArguments =
    { first : OptionalArgument Int
    , last : OptionalArgument Int
    , after : OptionalArgument String
    }


type alias LinksRequiredArguments =
    { projectId : Graphql.ScalarCodecs.Id }


links :
    (LinksOptionalArguments -> LinksOptionalArguments)
    -> LinksRequiredArguments
    -> SelectionSet decodesTo Graphql.Object.LinkConnection
    -> SelectionSet decodesTo RootQuery
links fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { first = Absent, last = Absent, after = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "after" filledInOptionals.after Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "links" (optionalArgs ++ [ Argument.required "projectId" requiredArgs.projectId (Graphql.ScalarCodecs.codecs |> Graphql.Scalar.unwrapEncoder .codecId) ]) object_ identity
